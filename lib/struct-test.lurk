!(load "struct.lurk")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; struct
!(def foo (struct '(:a :b :c)))
!(def x ((foo :new) '(1 2 3)))

!(assert-eq 1 (x :a))
!(assert-eq 2 (x :b))
!(assert-eq 3 (x :c))

!(def y ((foo :new) '(9 8 7)))
(emit (cons :foo-new ((foo :new) '(9 8 7)))) ;; 14 iterations

;; First access of :b in x -- 54 iterations
(cons :xb (x :b))
;; [54 iterations] => (:xb . 2)

;; Second access of :b in x -- 1 iteration
(cons :xb-xb (begin (x :b) (x :b)))
;; [55 iterations] => (:xb-xb . 2)

;; First access of :b in y -- 27 iterations
(cons :xb-xy (begin (x :b) (y :b)))
;; [81 iterations] => (:xb-xy . 8)

;; First access of :a in x -- 25 iterations
(cons :xb-yb-xa (begin (x :b) (y :b) (x :a)))
;; [106 iterations] => (:xb-yb-xa . 1)

;; First access of :a in y -- 11 iterations
(cons :xb-yb-xa-ya (begin (x :b) (y :b) (x :a) (y :a)))
;; [117 iterations] => (:xb-yb-xa-ya . 9)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; alist-struct

!(def foo (alist-struct '(:a :b :c)))
!(def x ((foo :new) '(1 2 3)))

!(assert-eq 1 (x :a))
!(assert-eq 2 (x :b))
!(assert-eq 3 (x :c))

!(def y ((foo :new) '(9 8 7)))
(emit (cons :foo-new ((foo :new) '(9 8 7)))) ;; 65 iterations

;; First access of :b in x -- 33 iterations
(cons :xb (x :b))
;; [33 iterations] => (:xb . 2)

;; Second access of :b in x -- 1 iteration
(cons :xb-xb (begin (x :b) (x :b)))
;; [34 iterations] => (:xb-xb . 2)

;; First access of :b in y -- 30 iterations
(cons :xb-xy (begin (x :b) (y :b)))
;; [64 iterations] => (:xb-xy . 8)

;; First access of :a in x -- 20 iterations
(cons :xb-yb-xa (begin (x :b) (y :b) (x :a)))
;; [84 iterations] => (:xb-yb-xa . 1)

;; First access of :a in y -- 19 iterations
(cons :xb-yb-xa-ya (begin (x :b) (y :b) (x :a) (y :a)))
;; [103 iterations] => (:xb-yb-xa-ya . 9)

